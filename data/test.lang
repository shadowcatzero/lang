struct Test {
   a: 64,
   b: 64,
}

fn start() {
   println("Helld!");
   print_hex(rem(10, 7));
   println("");
   println("Hello World!!!!!");
   thinger();
   let x = 3;
   if not(not(lt(x, 5))) {
       println("tada!");
   };
   println("before:");
   x = 0;
   loop {
      if not(lt(x, 10)) {
         break;
      };
      println("RAAAAA");
      x = add(x, 1);
   };
   println("after");
   print(tester());
   let test = Test {
      a: 10,
      b: 9,
   };
   arger("a", "b", "c");
   let z = sub(test.a, 10);
   // exit(add(mul(sub(add(5, test.b), 1), 3), z));
   print("test: 0x");
   print_hex(31);
   println("");
   exit(0);
}

fn structer(test: Test) {
}

fn thinger() {
   print("estamos jugando\n");
}

fn unused() {
   print("el unused\n");
}

fn println(msg: slice<8>) {
   print(msg);
   print("\n");
}

fn print(msg: slice<8>) {
   asm (a1 = &msg) {
      ld a2, 8, a1
      ld a1, 0, a1
      li a0, 1
      li a7, 64
      ecall
   }
}

fn print_hex(x: 64) {
   let i = 32;
   loop {
      i = sub(i, 4);
      let c = and(shr(x, i), 15);
      if gt(c, 9) {
         c = add(c, 7);
      };
      c = add(c, 48);
      asm (a1 = &c) {
         li a2, 1
         li a0, 1
         li a7, 64
         ecall
      };
      if lt(i, 1) {
         break;
      };
   }
}

fn add(a: 64, b: 64) -> 64 {
   asm (t0 = a, t1 = b, out = t0) {
      add t0, t0, t1
   }
}

fn mul(a: 64, b: 64) -> 64 {
   asm (t0 = a, t1 = b, out = t0) {
      mul t0, t0, t1
   }
}

fn div(a: 64, b: 64) -> 64 {
   asm (t0 = a, t1 = b, out = t0) {
      div t0, t0, t1
   }
}

fn sub(a: 64, b: 64) -> 64 {
   asm (t0 = a, t1 = b, out = t0) {
      sub t0, t0, t1
   }
}

fn rem(a: 64, b: 64) -> 64 {
   asm (t0 = a, t1 = b, out = t0) {
      rem t0, t0, t1
   }
}

fn shr(a: 64, b: 64) -> 64 {
   asm (t0 = a, t1 = b, out = t0) {
      srl t0, t0, t1
   }
}

fn shl(a: 64, b: 64) -> 64 {
   asm (t0 = a, t1 = b, out = t0) {
      sll t0, t0, t1
   }
}

fn lt(a: 64, b: 64) -> 64 {
   asm (t0 = a, t1 = b, out = t0) {
      slt t0, t0, t1
   }
}

fn gt(a: 64, b: 64) -> 64 {
    lt(b, a)
}

fn and(a: 64, b: 64) -> 64 {
   asm (t0 = a, t1 = b, out = t0) {
      and t0, t0, t1
   }
}

fn not(a: 64) -> 64 {
   asm (t0 = a, out = t0) {
      xori t0, t0, 1
   }
}

fn arger(a: slice<8>, b: slice<8>, c: slice<8>) {
   print(a);
   print(b);
   println(c);
}

fn exit(status: 64) {
   asm (a0 = status) {
      li a7, 93
      ecall
   };
}

fn tester() -> slice<8> {
   "hola\n"
}
